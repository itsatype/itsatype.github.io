<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Leah's Loop]]></title>
  <link href="http://http://itsatype.github.io/atom.xml" rel="self"/>
  <link href="http://http://itsatype.github.io/"/>
  <updated>2016-04-09T17:57:16-04:00</updated>
  <id>http://http://itsatype.github.io/</id>
  <author>
    <name><![CDATA[Leah]]></name>
    
  </author>

  
  <entry>
    
    <title type="html"><![CDATA[Pair Programming]]></title>
    <link href="http://itsatype.github.io/blog/2016/04/09/pair-programming/"/>
    
    <updated>2016-04-09T00:00:00-04:00</updated>
    <id>http://http://itsatype.github.io/blog/2016/04/09/pair-programming</id>
    
      <content type="html"><![CDATA[<h2>Programming in Paris..um, I meant Pairs.</h2>

<p><em>That was me fumbling because I was typing while pair programming, which often leads me to erratic typing and the inevitable ensuing typos.</em></p>

<p>Pair Programming is an Agile Software Development practice where two (or sometimes three or four, if you’re working on a group project together at Flatiron School), program together.  Generally, there is one person that is typing at the keyboard, referred to as the driver, and the other is observing and offering input and direction, known as the navigator.</p>

<p><img src="https://rickischultz.files.wordpress.com/2010/02/kirk-spock-mccoy.jpg"></p>

<p>The touted benefits of pair programming are enormous.  Most notably, pair programmers spend about 15% more time on programs than solo programmers, but the resulting code has about 15% fewer defects and bugs.
The transfer of knowledge between pair programmers is immediate, from tips on programming language rules to overall skill, or just a handy keyboard shortcut.
In a survey of pair programmers, 96% of them stated that they enjoyed their work more than when they programmed alone, and that they were more confident in their solutions when they pair programmed.</p>

<p><img src="http://dsouthard.github.io/CSCI5828_PairProgramming/images/mistakes.png"></p>

<p>Yet, though it’s been over two months that I’ve been pair programming, I still feel like I haven’t gotten the hang of the  different roles yet.  What is required of the navigator? Do they just watch as the other person types, and only jump in if they are directly asked a question? When is it okay to intervene if you think something is wrong? How long do you wait before pointing out a typo? If you aren’t following the driver’s thought process, how do you rectify that?</p>

<p>What about the driver? Are you to always take the navigator’s suggestions and implement them? What if it takes you down a rabbit hole? Should you just be typing whatever the navigator dictates? How do you ensure that your partner isn’t just watching as you type, but instead is engaged in your thought process?</p>

<p>So I’m going to attempt and break this down, so it’s clear what each role is supposed to be doing, and what some of the best practices are, so that everyone gets the most out of the experience as possible.</p>

<p><img src="http://assets.amuniversal.com/2607a8e06d5901301d7d001dd8b71c47"></p>

<p>First, let’s look at some of the no-nos while pairing.</p>

<h2>Pairing Smells</h2>

<ul>
<li><p>Unequal Access to Keyboard: Both Pair Programmers should be able to reach the keyboard and see the screen equally well.</p></li>
<li><p>Worker/Rester: Both the driver and navigator should actively be participating at all times.  If one needs a rest, maybe take a break, or it&rsquo;s time to switch roles.</p></li>
<li><p>Silence: At least the driver, but even the navigator, are expected to keep up a running commentary at all times, so that everyone stays in the loop. Pair programming is about &ldquo;programming out loud”. If someone is silent too long, feel free to intervene.</p></li>
<li><p>Debating: Debates lasting longer than a few minutes are pointless.  Rather than arguing about it, the better solution is for one or the other to quit telling and start showing how they want the code to work. Arguing in code is better than arguing about code.</p></li>
</ul>


<p>Now for some tips in each of the roles.</p>

<h2>The Driver:</h2>

<ul>
<li><p>When you start pairing, expect to feel clumsy and fumble-fingered as you drive. You’ll make typos and perhaps go at a faster or slower pace than you normally would while coding solo.  Things will greatly improve with time, and come naturally.  Just get it out of the way.</p></li>
<li><p>You may feel or realize that the navigator sees ideas and expected problems sooner than you do. And they very well might.  This is because they have more time to think than the driver does.  That is their role.</p></li>
<li><p>As you drive, think out loud.  This helps the navigator follow your thought process and understand your decision to go a certain direction.  It’s easier to follow the code if you are the one doing the typing.  Keep them in the loop.</p></li>
<li><p>If the navigator suggests trying something out, and it won’t take too long to implement their idea, even if you don’t think it will work, try it.  You’ll never know otherwise.</p></li>
<li><p>If the navigator is more experienced, respect that.  It’s all about the learning experience, so it only means you have more to gain.  Accept their input and implement their suggestions.  Learn from their insights and thought process.</p></li>
<li><p>Conversely, if the navigator is dictating code word for word, stop and listen. This will ensure that they tell you more of their plan than what syntax to type, so you can gain an understanding of what they are trying to implement.</p></li>
<li><p>Don’t drive too long.  Ask the other person to drive!</p></li>
</ul>


<h2>The Navigator:</h2>

<ul>
<li><p>Let the driver finish writing a complete line of code before pointing out an error.  They may sometimes be aware of their mistake, but are waiting until they finish typing to go back and fix it.  A good navigator knows when to wait a little bit before pointing out a missing semicolon somewhere, and will do it when there’s a natural pause in the driving.</p></li>
<li><p>Expect to feel like you want to step in and take the keyboard away from your partner. It’s so much easier than watching them fumble their way to something.  Relax, you’ll usually learn something by observing the other’s thought process.</p></li>
<li><p>It’s easy to get carried away and treat the driver as an order-taker, especially if you are more experienced in the field. Try to avoid doing this by allowing the driver to go at it when they can, and offer direction when they get stuck on how to proceed.</p></li>
<li><p>Pay attention. It’s easy to lose focus when you aren’t the driver. When you pay attention, talk, and listen, you become engrossed in the work.  If you do lose focus, mention this right away and be brought up to speed.  Don’t wait.</p></li>
<li><p>The person who knows less about the system or language should do most of the driving, to ensure that they stay engaged, and that the knowledge gap doesn’t widen. You learn more actively than passively.</p></li>
<li><p>If the driver is more familiar with the code or language, they might be going full speed ahead, leaving you to simply watch as a solution emerges.  In order to stay more involved, ask them to slow down and explain.  This might also be a good time to ask to drive.</p></li>
<li><p>When a question arises, take a moment to look up the answer (I’m looking at you, StackOverflow), while the driver continues to type.  If the research requires more than a few minutes, investigate the solution together. Sometimes the best way to do so is to split up and then come back together to share what you’ve both learned.</p></li>
<li><p>Ask to drive!</p></li>
</ul>


<p>Lastly, whether you’re a driver or navigator, if you&rsquo;re confused about something, <strong>ask questions</strong>.  The ensuing discussion may enlighten your partner as much as it does you.  Often, forcing someone to explain something and break it down allows them to understand the concept on a whole new level, and see it in a different light.</p>

<p>It is possible that one partner knows more than the other or that there are multiple ways to achieve the same results. However, no matter the skill level, from my experience, there is always something to learn when pairing.</p>

<p><img src="https://hot4spock.files.wordpress.com/2009/05/naked2.png"></p>

<h4><em>“'If you want to go fast, go alone. If you want to go far, go together"</em></h4>

<p>Resources:</p>

<p><a href="http://agileinaflash.blogspot.com/2009/02/pair-programming-smells.html">http://agileinaflash.blogspot.com/2009/02/pair-programming-smells.html</a></p>

<p><a href="http://www.amazon.com/Pair-Programming-Illuminated-Laurie-Williams/dp/0201745763">Pair Programming Illuminated</a></p>

<p>To become a better pair programmer, also read about: <a href="http://blog.codinghorror.com/the-ten-commandments-of-egoless-programming/">Egoless Programming</a></p>
]]></content>
      
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Stay weird, JS]]></title>
    <link href="http://itsatype.github.io/blog/2016/03/27/stay-weird/"/>
    
    <updated>2016-03-27T14:54:13-04:00</updated>
    <id>http://http://itsatype.github.io/blog/2016/03/27/stay-weird</id>
    
      <content type="html"><![CDATA[<h2>Why the Wat</h2>

<p><img src="http://itsatype.github.io/images/what.gif" width="300"></p>

<p>Javascript is weird.  There are some odd behaviors it exhibits, with strange outcomes. You can learn more about some of it’s oddities by watching <a href="https://www.destroyallsoftware.com/talks/wat">this lightning talk</a> by Gary Bernhardt from CodeMash 2012.</p>

<p>But hey, that’s enough trash talk.  In the spirit of giving the benefit of the doubt, let’s explore the reasons for some of its odd behavior. Maybe it&rsquo;s just having a bad day.  Maybe it was never loved as a child.  We don&rsquo;t know.</p>

<p>First and foremost, we should know that the general rule in Javascript is that the plus operator can be used for the following:</p>

<ol>
<li>As an addition operator, operating on two numbers</li>
<li>As a string concatenation operator, operating on two strings</li>
<li>As a prefix operator, indicating a positive number, operating on a single number</li>
</ol>


<p> This means you can only add Numbers and Strings, so any time you are using the + operator and are trying to add other values, such as arrays or objects, Javascript will convert it to either a string or a number, first.</p>

<ul>
<li>Boolean, Null, and Undefined coerce to a number</li>
<li>Objects and functions all coerce to a string</li>
</ul>


<p>Here we go.</p>

<hr />

<p><strong>Array + Array = Empty String</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[]</span> <span class="o">+</span> <span class="p">[]</span> <span class="o">=</span> <span class="err">‘’</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since our object is an array, and an array object has a valid toString() method on it, Javascript will try to convert it to a string by calling the object.toString().</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[].</span><span class="nx">toString</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="err">‘’</span>
</span></code></pre></td></tr></table></div></figure>


<p>For arrays, this is the same as calling [ ].join(), which will also return an empty string.  Therefore, [] + [] is the concatenation of two empty strings, which will return a single empty string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">‘’</span> <span class="o">+</span> <span class="err">‘’</span>
</span><span class='line'>
</span><span class='line'> <span class="o">=&gt;</span> <span class="err">‘’</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next:</p>

<p><strong>Array + Object = &lsquo;[object Object]’</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[]</span> <span class="o">+</span> <span class="p">{}</span> <span class="o">=</span> <span class="err">&#39;</span><span class="p">[</span><span class="nx">object</span> <span class="nb">Object</span><span class="p">]</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similar to the above, we already know Javascript will attempt to convert both to primitives.  It will return an empty string for the array.  Then, it will attempt to call the toString method on the right-hand side (RHS), which is our object.  However, {} does not implement a toString() method. However, all objects do inherit this method from Object.prototype, which, when calling toString() on Object, will return ‘object’, and the value of the object, as follows:</p>

<ul>
<li>If the value is undefined: &ldquo;[object Undefined]&rdquo;</li>
<li>If the value is null “[object Null]</li>
</ul>


<p>Since an empty object is neither null, nor undefined, it will return ‘[object Object]’.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">String</span><span class="p">(</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="err">‘</span><span class="nx">bar</span><span class="err">’</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span>  <span class="err">‘</span><span class="p">[</span><span class="nx">object</span> <span class="nb">Object</span><span class="p">]</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure>


<p>So when concatenating ‘’ +  ‘[object Object]’, it will still return: &lsquo;[object Object]’</p>

<p><strong>Object + Empty Arary = 0</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{}</span> <span class="o">+</span> <span class="p">[]</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is where things start getting weird.  When coding in JS, we wrap our statements in curly braces, such as if and else, to indicate a code block. Generally speaking, if the { appears at the beginning of a statement it’s going to be interpreted as a code block, so it will simply look at the left-hand side (LHS) operand as an empty block of code.  That would mean the + appears as the beginning of the next statement, and it is interpreted as prefixing a positive number.  And an array, all together now, is coerced into an empty string.  Because of the + prefix, it will then convert that to a number.  What happens when we coerce an empty string to a number?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Number</span><span class="p">(</span><span class="err">“”</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>We’ve got this.</p>

<p><strong>Object + Object = Not A Number</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{}</span> <span class="o">+</span> <span class="p">{}</span> <span class="o">=</span> <span class="kc">NaN</span>
</span></code></pre></td></tr></table></div></figure>


<p>This should be easy, seeing as we already know Javascript’s quirks.  It will interpret the LHS as an empty code block. It will then try to convert the RHS, by first returning ‘[object Object]’, if you remember that.  Then, since it sees + as a prefix + operator indicating a positive number, it will attempt to convert it to a number.  What happens when we convert strings to numbers?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Number</span><span class="p">(</span><span class="err">“</span><span class="nx">Foo</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="kc">NaN</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>And voila, there we have it.</p>

<p>Okay, so maybe Javascript is still a little weird. But weird is good.  At least that&rsquo;s what my mother used to tell me.</p>

<h4><em>“Be weird. Be random. Be who you are.&ldquo;</em></h4>

<p>&ndash; <em>C.S. Lewis</em></p>

<p><img src="http://itsatype.github.io/images/bowties.png" width="500"></p>
]]></content>
      
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[That’s so meta]]></title>
    <link href="http://itsatype.github.io/blog/2016/03/15/magic-in-macros-and-metaprogramming/"/>
    
    <updated>2016-03-15T00:24:19-04:00</updated>
    <id>http://http://itsatype.github.io/blog/2016/03/15/magic-in-macros-and-metaprogramming</id>
    
      <content type="html"><![CDATA[<h2>Magic in Macros &amp; Metaprogramming</h2>

<p><img src="http://itsatype.github.io/images/magic.png" width="600"></p>

<p>I recently began learning Ruby on Rails, and my predominant thought was ‘Is this magic?&lsquo;. Rails incorporates the use of ‘macros’, which are simple yet powerful statements that run many lines of code.  Some of the more common ones are ‘resources’, ‘has_many / belongs_to’, and ‘accepts nested attributes’.  And while a magician never reveals his tricks, macros are simply Ruby code. Ruby&rsquo;s flexible approach to syntax coupled with Rail’s ‘convention over configuration’ just makes this seem cooler that it actually is. AKA magic.</p>

<p>Using metaprogramming, Rails writes a lot of the methods for us.  And because Ruby is a dynamic language (versus a statically typed language),  it gives you the freedom to define methods and even classes during runtime.</p>

<p>A dynamic language, in a nutshell, allows you to set the same variable to an integer, string, hash, etc.  It allows you to do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">something</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">something</span> <span class="o">=</span> <span class="s2">&quot;Foo&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">something</span> <span class="o">=</span> <span class="p">{</span><span class="n">foo</span> <span class="o">=&gt;</span> <span class="err">‘</span><span class="n">bar</span><span class="err">’</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, I will attempt to break down the ActiveRecord has_many macro and explain how it works under the hood.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Ruby</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">has_many</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="err">‘</span><span class="c1">#{self} has many #{name}”</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:gems</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="err">“</span><span class="no">Ruby</span> <span class="n">has</span> <span class="n">many</span> <span class="n">gems</span><span class="err">”</span>
</span></code></pre></td></tr></table></div></figure>


<p>If has_many :gems calls on the method Ruby.has_many method, and passed in gems for the name argument.</p>

<p>In Rails, the has_many dynamically defines a handful of methods for managing the association.  For example, in this case it would generate a gems method, that would return the gems associated with the Ruby class.  How would we do that?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Ruby</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">has_many</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2"> has many </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">”</span>
</span><span class='line'>
</span><span class='line'><span class="s2"> def gems</span>
</span><span class='line'><span class="s2">     puts “SELECT * FROM gems WHERE …&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="err">“</span><span class="n">returning</span> <span class="n">gems</span><span class="err">”</span>
</span><span class='line'>      <span class="o">[]</span>
</span><span class='line'>      
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:gems</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, this is hard-coded, and we don’t yet know the names of those methods until run-time, so we need to dynamically define those methods, on the fly.</p>

<p> Dynamic methods are a set of methods that can create or call methods when the actual name of the method is not known. The define_method is a dynamic method which takes the name of the method we want to generate.  The body of the block becomes the body of the method.</p>

<p>We want to define a method that corresponds to the name of the association, and we have that in the argument name.  define_methods, when executed, create other methods that can then be called on an instance object. It defines an instance method in the receiver, which in this case is the Ruby class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Ruby</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">has_many</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="err">‘</span><span class="c1">#{self} has many #{name}”</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">define_method</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="err">“</span><span class="no">SELECT</span> <span class="o">*</span> <span class="no">FROM</span> <span class="c1">#{name} WHERE …”</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="err">“</span><span class="n">returning</span> <span class="c1">#{name}”</span>
</span><span class='line'>          <span class="o">[]</span>
</span><span class='line'>          
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:gems</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">ruby</span> <span class="o">=</span> <span class="no">Ruby</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">ruby</span><span class="o">.</span><span class="n">gems</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span>
</span><span class='line'><span class="no">Ruby</span> <span class="n">has</span> <span class="n">many</span> <span class="n">gems</span>
</span><span class='line'><span class="no">SELECT</span> <span class="o">*</span> <span class="no">FROM</span> <span class="n">gems</span> <span class="no">WHERE</span><span class="err">…</span>
</span><span class='line'><span class="n">returning</span> <span class="n">gems</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="err">“</span><span class="no">Annotate</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="no">Pry</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="no">Better_errors</span><span class="err">”</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we run this code it first calls on has_many :gems, and defines the method.  Then if we call ruby.gems, it will run the method and return the gems.<br/>
Because we define it dynamically, we can also say has_many :methods, or anything else, for that matter.</p>

<p>Now how do we share this across multiple classes?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveRecord</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">has_many</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="err">‘</span><span class="c1">#{self} has many #{name}”</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">define_method</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="err">“</span><span class="no">SELECT</span> <span class="o">*</span> <span class="no">FROM</span> <span class="c1">#{name} WHERE …”</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="err">“</span><span class="n">returning</span> <span class="c1">#{name}”</span>
</span><span class='line'>          <span class="o">[]</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Ruby</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:gems</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:methods</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now things are beginning to look more familiar.  We put this in the class Base in a module named ActiveRecord, and have our classes inherit these magical powers.</p>

<p><img src="http://itsatype.github.io/images/i_love_magic.gif" width="600"></p>
]]></content>
      
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Pipes]]></title>
    <link href="http://itsatype.github.io/blog/2016/02/13/my-first-post-on-octopress/"/>
    
    <updated>2016-02-13T00:00:33-05:00</updated>
    <id>http://http://itsatype.github.io/blog/2016/02/13/my-first-post-on-octopress</id>
    
      <content type="html"><![CDATA[<p><img src = "../images/pipes.png" width = "500px;" /></p>

<p>The double pipes, also known as a short circuit operator because it will only evaluate the second argument if the first argument is not sufficient to determine the value of the expression, is a great tool for writing concise code.   In addition to being the logical &ldquo;or&rdquo; operator, they&rsquo;re handy when used with a method which may evaluate to nil, such as find, or when used with the assignment operator, the &ldquo;or equals&rdquo;.
For me, they&rsquo;ve been like that cool kid that you see around, but don&rsquo;t think you can ever relate to. But then you get acquainted, speak to them once or twice, finally get to know them, and they&rsquo;re suddenly someone you love having around.</p>

<h2>Double Pipe Equals: ||=</h2>

<p>However, things may seem counter-intuitive when using it as a conditional assignment operator, because the || = works differently than other operators such as the += or -=.</p>

<h3>The Misconception</h3>

<p><img src = "../images/misconception.jpg" width = "300px;" /></p>

<p>So:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">X</span> <span class="o">+=</span> <span class="n">Y</span>
</span></code></pre></td></tr></table></div></figure>


<p>is the same as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="n">X</span> <span class="o">+</span> <span class="n">Y</span>
</span></code></pre></td></tr></table></div></figure>


<p>Therefore you would expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">X</span> <span class="o">||=</span> <span class="n">Y</span>
</span></code></pre></td></tr></table></div></figure>


<p>To mean:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="n">X</span> <span class="o">||</span> <span class="n">Y</span>
</span></code></pre></td></tr></table></div></figure>


<p>But what it is actually shorthand for is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">X</span> <span class="o">||</span> <span class="n">X</span> <span class="o">=</span> <span class="n">Y</span>
</span></code></pre></td></tr></table></div></figure>


<p>What it means is if X is false, nil or undefined, then evaluate Y and set X to the result.  Ruby&rsquo;s short circuit evaluation means that if X is defined and evaluates to true, then the right hand side of the operator is not evaluated, and no assignment takes place.</p>

<p>In Essence:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">||=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="n">a</span> <span class="o">||=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="kp">false</span><span class="p">;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="n">foo</span> <span class="o">||=</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">foo</span> <span class="o">||=</span> <span class="kp">false</span><span class="p">;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>This can be handy when assigning key/value pairs with hashes.  For example, when given a hash, this expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span> <span class="o">||=</span> <span class="s2">&quot;value&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Expands to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span> <span class="o">||</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;value&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means that hash[:key] = &ldquo;value&rdquo; will only be executed if hash[:key] is either false or nil, meaning the key does not yet exist.  So if the key already exists, the value will not be changed, since the left side evaluates to true, and it will return the value for that key.  If, however, the key does not exist, the left side will evaluate to nil, in which case it will execute the right side, and create the key/value pair.</p>

<p>This distinction is also significant when used with a setter/getter method in a Class.  For example, we can has an instance method for calculating the total:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Class</span> <span class="no">CashRegister</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">total</span>
</span><span class='line'>    <span class="vi">@total</span> <span class="o">||=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can call on the total method as many times as we&rsquo;d like.  The first time, @total will evaluate to nil, and will calculate the total to the right.  It will then also assign @total to that value.  On all future events where we call on that method, it will simply return the value of @total.</p>

<p>That&rsquo;s that for pipes. It&rsquo;s a good friend to have.</p>

<p><img src = "../images/time_up.png" width="400px;" /></p>
]]></content>
      
  </entry>
  
</feed>
