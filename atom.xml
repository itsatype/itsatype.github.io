<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tech Talk]]></title>
  <link href="http://itsatype.github.io/atom.xml" rel="self"/>
  <link href="http://itsatype.github.io/"/>
  <updated>2016-03-01T09:44:49-05:00</updated>
  <id>http://itsatype.github.io/</id>
  <author>
    <name><![CDATA[Leah]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Servers, Headers, and Routers]]></title>
    <link href="http://itsatype.github.io/blog/2016/03/01/servers/"/>
    <updated>2016-03-01T09:23:41-05:00</updated>
    <id>http://itsatype.github.io/blog/2016/03/01/servers</id>
    <content type="html"><![CDATA[<h1>Off with their Headers</h1>

<p><img src= "../images/Queen_of_Hearts.jpg"></p>

<p>Really, what are they, aside from a jumble of words in your head? Turns out, it’s not that complicated.  Say you go online and visit stackoverflow.com, because you’re desperately trying to get your code to work. What happens next?</p>

<h2>Packets</h2>

<p>It turns out that everything you do on the Internet involves packets. For example, every Web page that you receive comes as a series of packets, and every e-mail you send leaves as a series of packets.  The information could be sent by being broken down into smaller packets.  Just like any package you send, this packet contains the sender&rsquo;s IP address, and the intended receiver&rsquo;s IP address.</p>

<h2>TCP/ IP &amp; Routers</h2>

<p><img src ="../images/router.jpeg" /></p>

<p>The way information gets transferred, is that it need not follow a fixed path.  Routers, which are special computers on the Internet that route packages to the proper destination. It chooses the cheapest path for sending the packets, which means it considers politics and relationships between companies.</p>

<p>What if not everything is delivered? That&rsquo;s where TCP comes in, it manages the sending and receiving of all the data as packets, like a guaranteed mail service. If all packets are there, TCP signs for your delivery and you&rsquo;re done.</p>

<h2>Servers</h2>

<p><img src ="../images/waiter.gif" /></p>

<p>A server is a computer designed to deliver, or serve up, a specific function for other computers, or clients. It can be seen as a telephone call, in which someone is called and they answer the call.</p>

<h3>Request / Response</h3>

<p>Request–response is the method computers use to communicate with each other, in which the client sends a request for some data and the server responds to the request.</p>

<p>A client can be thought of as a child who is constantly making requests from it’s parent, the server.  The parent, or server, is constantly there listening for requests, and responding to any request that is made by serving things up.</p>

<p>The language the child and parent use for the request / response is HTTP.  If you were to intercept the conversation between a client and a server, it’s simply made up of HTTP requests, since an HTTP session is just a sequence of network request-response transactions.
An HTTP client initiates a request by establishing a connection to a particular port on a server. The HTTP server listening on that port waits for a client&rsquo;s request message.</p>

<p>Any computer can be turned into a web server. The computer is designed so that it has software installed on it for the purpose of serving you websites.  With Rack, that would be the WEBrick module.  Webrick  is an HTTP server toolkit that will listen to connections.  Rack then talks to the server, and will wrap HTTP requests and responses into a single method call.</p>

<p>Then you can type in your local computer’s address and it serves itself. Child and parent all rolled into one computer, or a self-serving computer.</p>

<p>It’s interesting to note that custom HTTP response headers could be used.</p>

<p>As a recruiting method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>Howtogeek.com
</span><span class='line'>
</span><span class='line'>X-Hello-Human: If you found this header please email us about a writing job.
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>booking.com
</span><span class='line'>
</span><span class='line'>X-Recruiting: Like HTTP headers? Come write ours: booking.com/jobs
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>Zappos.com
</span><span class='line'>
</span><span class='line'>X-Recruiting: If you’re reading this, maybe you should be working at Zappos instead.
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>MySpace.com
</span><span class='line'>
</span><span class='line'>X-PoweredBy: Unicorns
</span><span class='line'>X-PoweredBy: Nerd Rage
</span><span class='line'>X-PoweredBy: Rats in our Basement
</span></code></pre></td></tr></table></div></figure>


<p>As for servers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>reddit.com
</span><span class='line'>
</span><span class='line'>Server: ‘; DROP TABLE servertypes; —
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>SME.sk
</span><span class='line'>
</span><span class='line'>Server: ninja web server 1.3.3.7
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>mysitecost.ru
</span><span class='line'>
</span><span class='line'>Server: iPad.3
</span></code></pre></td></tr></table></div></figure>


<p>Aside from humor, HTTP headers are how we access data on the Internet every day, and how I finished writing this with the help of Stackoverflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Servers, Headers, and HTTP]]></title>
    <link href="http://itsatype.github.io/blog/2016/02/29/serverse/"/>
    <updated>2016-02-29T22:58:33-05:00</updated>
    <id>http://itsatype.github.io/blog/2016/02/29/serverse</id>
    <content type="html"><![CDATA[<h1>Off with their Headers</h1>

<p><img src= "queen_of_hearts.jpeg"></p>

<p>Really, what are servers? Turns out, it’s not that complicated.  Say you go online and visit stackoverflow.com, because you’re desperately trying to get your code to work. Your computer then sends a request to the Stackoverflow server.</p>

<p>Here’s what that means:</p>

<h2>Servers</h2>

<p><img src ="../images/waiter.gif" /></p>

<p>A server is a computer designed to deliver, or serve up, a specific function for other computers, or clients. It can be seen as a telephone call, in which someone is called and they answer the call.</p>

<h3>Request / Response</h3>

<p>Request–response is the method computers use to communicate with each other, in which the client sends a request for some data and the server responds to the request.</p>

<p>A client can be thought of as a child who is constantly making requests from it’s parent, the server.  The parent, or server, is constantly there listening for requests, and responding to any request that is made by serving things up.</p>

<p>The language the child and parent use for the request / response is HTTP.  If you were to intercept the conversation between a client and a server, it’s simply made up of HTTP requests, since an HTTP session is just a sequence of network request-response transactions.
An HTTP client initiates a request by establishing a connection to a particular port on a server. The HTTP server listening on that port waits for a client&rsquo;s request message.</p>

<p>Any computer can be turned into a web server. The computer is designed so that it has software installed on it for the purpose of serving you websites.  With Rack, that would be the WEBrick module.  Webrick  is an HTTP server toolkit that will listen to connections.  Rack then talks to the server, and will wrap HTTP requests and responses into a single method call.</p>

<p>Then you can type in your local computer’s address and it serves itself. Child and parent all rolled into one computer, or a self-serving computer.</p>

<p>It’s interesting to note that custom HTTP response headers could be used.</p>

<p>As a recruiting method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>Howtogeek.com
</span><span class='line'>X-Hello-Human: If you found this header please email us about a writing job.
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>booking.com
</span><span class='line'>X-Recruiting: Like HTTP headers? Come write ours: booking.com/jobs
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>zappos.com
</span><span class='line'>X-Recruiting: If you’re reading this, maybe you should be working at Zappos instead.
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>myspace.com
</span><span class='line'>X-PoweredBy: Unicorns
</span><span class='line'>X-PoweredBy: Nerd Rage
</span><span class='line'>X-PoweredBy: Rats in our Basement
</span></code></pre></td></tr></table></div></figure>


<p>As for servers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>reddit.com
</span><span class='line'>Server: ‘; DROP TABLE servertypes; —
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>SME.sk
</span><span class='line'>Server: ninja web server 1.3.3.7
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'>mysitecost.ru
</span><span class='line'>Server: iPad.3
</span></code></pre></td></tr></table></div></figure>


<p>Aside from humor, HTTP headers are how we access data on the Internet every day, and how I finished writing this with the help of Stackoverflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pipes]]></title>
    <link href="http://itsatype.github.io/blog/2016/02/13/my-first-post-on-octopress/"/>
    <updated>2016-02-13T00:00:33-05:00</updated>
    <id>http://itsatype.github.io/blog/2016/02/13/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p><img src = "../images/pipes.png" width = "500px;" /></p>

<p>The double pipes, also known as a short circuit operator because it will only evaluate the second argument if the first argument is not sufficient to determine the value of the expression, is a great tool for writing concise code.   In addition to being the logical &ldquo;or&rdquo; operator, they&rsquo;re handy when used with a method which may evaluate to nil, such as find, or when used with the assignment operator, the &ldquo;or equals&rdquo;.
For me, they&rsquo;ve been like that cool kid that you see around, but don&rsquo;t think you can ever relate to. But then you get acquainted, speak to them once or twice, finally get to know them, and they&rsquo;re suddenly someone you love having around.</p>

<h2>Double Pipe Equals: ||=</h2>

<p>However, things may seem counter-intuitive when using it as a conditional assignment operator, because the || = works differently than other operators such as the += or -=.</p>

<h3>The Misconception</h3>

<p><img src = "../images/misconception.jpg" width = "300px;" /></p>

<p>So:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">X</span> <span class="o">+=</span> <span class="n">Y</span>
</span></code></pre></td></tr></table></div></figure>


<p>is the same as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="n">X</span> <span class="o">+</span> <span class="n">Y</span>
</span></code></pre></td></tr></table></div></figure>


<p>Therefore you would expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">X</span> <span class="o">||=</span> <span class="n">Y</span>
</span></code></pre></td></tr></table></div></figure>


<p>To mean:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">X</span> <span class="o">=</span> <span class="n">X</span> <span class="o">||</span> <span class="n">Y</span>
</span></code></pre></td></tr></table></div></figure>


<p>But what it is actually shorthand for is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">X</span> <span class="o">||</span> <span class="n">X</span> <span class="o">=</span> <span class="n">Y</span>
</span></code></pre></td></tr></table></div></figure>


<p>What it means is if X is false, nil or undefined, then evaluate Y and set X to the result.  Ruby&rsquo;s short circuit evaluation means that if X is defined and evaluates to true, then the right hand side of the operator is not evaluated, and no assignment takes place.</p>

<p>In Essence:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">||=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="n">a</span> <span class="o">||=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="kp">false</span><span class="p">;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="n">foo</span> <span class="o">||=</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">foo</span> <span class="o">||=</span> <span class="kp">false</span><span class="p">;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>This can be handy when assigning key/value pairs with hashes.  For example, when given a hash, this expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span> <span class="o">||=</span> <span class="s2">&quot;value&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Expands to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span> <span class="o">||</span> <span class="nb">hash</span><span class="o">[</span><span class="ss">:key</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;value&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means that hash[:key] = &ldquo;value&rdquo; will only be executed if hash[:key] is either false or nil, meaning the key does not yet exist.  So if the key already exists, the value will not be changed, since the left side evaluates to true, and it will return the value for that key.  If, however, the key does not exist, the left side will evaluate to nil, in which case it will execute the right side, and create the key/value pair.</p>

<p>This distinction is also significant when used with a setter/getter method in a Class.  For example, we can has an instance method for calculating the total:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Class</span> <span class="no">CashRegister</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">total</span>
</span><span class='line'>    <span class="vi">@total</span> <span class="o">||=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can call on the total method as many times as we&rsquo;d like.  The first time, @total will evaluate to nil, and will calculate the total to the right.  It will then also assign @total to that value.  On all future events where we call on that method, it will simply return the value of @total.</p>

<p>That&rsquo;s that for pipes. It&rsquo;s a good friend to have.</p>

<p><img src = "../images/time_up.png" width="400px;" /></p>
]]></content>
  </entry>
  
</feed>
