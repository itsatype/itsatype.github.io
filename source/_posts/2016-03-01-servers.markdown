---
layout: post
title: "Servers, Headers, and Routers"
date: 2016-03-01 09:23:41 -0500
comments: true
categories: "Flatiron School"
---


#Off with their Headers
<img src= "../images/Queen_of_Hearts.jpg">

Really, what are they, aside from a jumble of words in your head? Turns out, it’s not that complicated.  Say you go online and visit stackoverflow.com, because you’re desperately trying to get your code to work. What happens next?

##Packets

It turns out that everything you do on the Internet involves packets. For example, every Web page that you receive comes as a series of packets, and every e-mail you send leaves as a series of packets.  The information could be sent by being broken down into smaller packets.  Just like any package you send, this packet contains the sender's IP address, and the intended receiver's IP address.

## TCP/ IP & Routers
<img src ="../images/router.jpeg" />

The way information gets transferred, is that it need not follow a fixed path.  Routers, which are special computers on the Internet that route packages to the proper destination. It chooses the cheapest path for sending the packets, which means it considers politics and relationships between companies.

What if not everything is delivered? That's where TCP comes in, it manages the sending and receiving of all the data as packets, like a guaranteed mail service. If all packets are there, TCP signs for your delivery and you're done.


##Servers
<img src ="../images/waiter.gif" />

A server is a computer designed to deliver, or serve up, a specific function for other computers, or clients. It can be seen as a telephone call, in which someone is called and they answer the call.



### Request / Response
Request–response is the method computers use to communicate with each other, in which the client sends a request for some data and the server responds to the request. 

A client can be thought of as a child who is constantly making requests from it’s parent, the server.  The parent, or server, is constantly there listening for requests, and responding to any request that is made by serving things up.  

The language the child and parent use for the request / response is HTTP.  If you were to intercept the conversation between a client and a server, it’s simply made up of HTTP requests, since an HTTP session is just a sequence of network request-response transactions. 
An HTTP client initiates a request by establishing a connection to a particular port on a server. The HTTP server listening on that port waits for a client's request message.

Any computer can be turned into a web server. The computer is designed so that it has software installed on it for the purpose of serving you websites.  With Rack, that would be the WEBrick module.  Webrick  is an HTTP server toolkit that will listen to connections.  Rack then talks to the server, and will wrap HTTP requests and responses into a single method call.

Then you can type in your local computer’s address and it serves itself. Child and parent all rolled into one computer, or a self-serving computer. 


It’s interesting to note that custom HTTP response headers could be used. 

As a recruiting method:

```HTML
Howtogeek.com

X-Hello-Human: If you found this header please email us about a writing job.
```

```HTML
booking.com

X-Recruiting: Like HTTP headers? Come write ours: booking.com/jobs
```

```HTML
Zappos.com

X-Recruiting: If you’re reading this, maybe you should be working at Zappos instead.
```

```HTML
MySpace.com

X-PoweredBy: Unicorns
X-PoweredBy: Nerd Rage
X-PoweredBy: Rats in our Basement
```

As for servers:

```HTML
reddit.com

Server: ‘; DROP TABLE servertypes; —
```

```HTML
SME.sk

Server: ninja web server 1.3.3.7
```

```HTML
mysitecost.ru

Server: iPad.3
```

Aside from humor, HTTP headers are how we access data on the Internet every day, and how I finished writing this with the help of Stackoverflow.
